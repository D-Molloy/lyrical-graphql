# ~~~~~~~~~~~~~~~~~~~~~
#     FRAGEMENTS
# ~~~~~~~~~~~~~~~~~~~~~

# Old Query
{
  apple: company(id: "1") {
    id
    name
    description
  }
  google: company(id: "2") {
    id
    name
    description
  }
}

# New Query:
{
  apple: company(id: "1") {
    ...companyDetails
  }
  google: company(id: "2") {
    ...companyDetails
  }
}

    # Creating the fragment - if we try to add fields not in the Company schema we'll get an error
fragment companyDetails on Company {
  id
  name
  description
}

# Output
{
  "data": {
    "apple": {
      "id": "1",
      "name": "Apple",
      "description": "iphone"
    },
    "google": {
      "id": "2",
      "name": "Google",
      "description": "search"
    }
  }
}




# ~~~~~~~~~~~~~~~~~~~~~
#     Mutations
# ~~~~~~~~~~~~~~~~~~~~~

# when we want to Create, Update, Delete data via graphQL

mutation{
  # specify which mutation and pass args
  addUser(firstName: "Blair", age: 26){
    # MUST specify the data you want back - comes from the resolve method
    id
    firstName
    age
  }
}

# result
{
  "data": {
    "addUser": {
      "id": "d1QU~Mb",
      "firstName": "Blair",
      "age": 26
    }
  }
}


# ~~~~~~~~~~~~~~~~~~~~~
#    GraphQL Clients
# ~~~~~~~~~~~~~~~~~~~~~

#   Front end - a React application Very tightly coupled with a graphql client
#   The purpose of the client is to do exactly what GraphQL does - send and get information from the GraphQL server

#    Three types of GraphQL clients
#       1. Lokka - As simple as possible.  Basic queries, mutations.  Some simple caching.
#       2. Apollo Client or Apollo Stack (can replace express-graphql) - Produced by the same guys as Meteor JS.  Good balance between features and complexity.  Ambitious feature set, with increasing difficulty.  Not a ton of experience in the GraphQL experience
#       3. Relay -  Amazing performance for MOBILE.  By far the most insanely complex.  What is used by the FB team.  Pay for performance with complexity.  Very complex mutations

# Apollo server vs GraphQL-Express
#     Why one over the other
#       GraphQL-Express is the reference implementation - official implementation that FB maintatins
#       Apollo is its own implementation - still in active development and has and will dramatically changed

#   Big diff between the two - Express-GraphQL co-locates the types and resovlers in one GraphQLObjectType whereas Apollo has them in seperate files


# ~~~~~~~~~~~~~~~~~~~~~
#    Apollo Client Setup
# ~~~~~~~~~~~~~~~~~~~~~

#   Broken into two parts
#     Apollo Store - what is communicating with the GraphQL server
#         - a client-side store of data/repository of all data coming from the server
#         - agnostic of what the client side tech is
#         - don't really have to mess with it
#     Apollo Provider - provider of data to our react app
#         - takes data from the store and injects it into the app

# ~~~~~~~~~~~~~~~~~~~~~
#    Graph QL + React Strategy
# ~~~~~~~~~~~~~~~~~~~~~
#   checklist for getting data
# 1.  Identify data required
# 2.  Write query in Graphiql(practice) and in component file
# 3.  Bond query + react componenet
# 4.  Access data

# ~~~~~~~~~~~~~~~~~~~~~
#     Mutations and Queries in the frontend
# ~~~~~~~~~~~~~~~~~~~~~
#  QUERIES ARE EXECUTED AUTOMATICALLY BY GQL
#  MUTATIONS ARE CALLED MANUALLY -this.props.mutate




# ~~~~~~~~~~~~~~~~~~~~~
#    Query Variables
# ~~~~~~~~~~~~~~~~~~~~~
#  When using dynamic queries or mutations, the mutation is defined outside the component class so we need some way of passing a value from the component to the mutation/query

mutation AddSong($title: String){
  addSong(title: $title){
    id
    title
  }
}
  
# Query Variable
{
  "title": "It's Time to React!"
}

